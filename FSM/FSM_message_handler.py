import pymysql
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from settings import user, exercise, training, db
from keyboards.reply import ReplyKb, create_reply_kbs, repeat_step_1_30, weight_step_1_30
from FSM.FSM_Dataclasses import UserDetailsState, NewExerciseState, StartTraining

fsm_router = Router()


async def update_and_notify(message: Message, state: FSMContext, field: str, value: str, redact_message: int = None):
    await state.update_data({field: value})
    data = await state.get_data()
    if not redact_message:
        await message.answer(f"–ì—Ä—É–ø–∞ –º º—è–∑—ñ–≤ - {data.get('muscle_group') if data.get('muscle_group') else '‚ùî'}\n"
                             f"–í–ø—Ä–∞–≤–∞ - {data.get('exercise_name') if data.get('exercise_name') else '‚ùî'}\n"
                             f"–í–∞–≥–∞ - {data.get('weight') if data.get('weight') else '‚ùî'} –∫–≥\n"
                             f"–ü–æ–≤—Ç–æ—Ä–∏ - {data.get('repeats') if data.get('repeats') else '‚ùî'} —Ä–∞–∑\n")


# –£—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞_________________________________________________________________________________________
@fsm_router.message(StateFilter(None), F.text == '–í–∫–∞–∑–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç—ñ–ª–∞')
async def func(message: Message, state: FSMContext):
    await state.set_state(UserDetailsState.weight)
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É –∫–≥:', reply_markup=ReplyKeyboardRemove())


@fsm_router.message(UserDetailsState.weight, F.text)
async def func(message: Message, state: FSMContext):
    await state.update_data(weight=message.text)
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫')
    await state.set_state(UserDetailsState.age)


@fsm_router.message(UserDetailsState.age, F.text)
async def func(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à —Ä—ñ—Å—Ç –≤ —Å–º.')
    await state.set_state(UserDetailsState.tall)


@fsm_router.message(UserDetailsState.tall, F.text)
async def func(message: Message, state: FSMContext):
    await state.update_data(tall=message.text)
    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å', reply_markup=ReplyKb.gender_btn)
    await state.set_state(UserDetailsState.gender)


@fsm_router.message(UserDetailsState.gender, F.text)
async def func(message: Message, state: FSMContext):
    await state.update_data(gender=message.text)
    data = await state.get_data()
    await state.clear()
    try:
        user.add_user_details(user_id=message.chat.id,
                              weight=data['weight'],
                              age=data['age'],
                              tall=data['tall'],
                              gender=data['gender'])
    except pymysql.err.DataError:
        await message.answer('üî¥–í–≤–µ–¥–µ–Ω–æ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.', reply_markup=ReplyKb.main_menu)
    else:
        await message.answer('üü¢–í—Å–µ –≥–æ—Ç–æ–≤–æ!', reply_markup=ReplyKb.main_menu)


# —Å—Ç–∞—Ç—å –≤—ñ–∫ —Ä—ñ—Å—Ç –≤–∞–≥–∞

# –ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è____________________________________________________________________________________________________
@fsm_router.message(StateFilter(None), (F.text == '–ü–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è') | (F.text == '–î–æ–¥–∞—Ç–∏ —â–µ –æ–¥–∏–Ω –ø—ñ–¥—Ö—ñ–¥'))
async def func(message: Message, state: FSMContext):
    ex = exercise.get_user_exercises(user_id=message.chat.id)
    if ex:
        await state.set_state(StartTraining.muscle_group)
        await message.answer('–©–æ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç—Ä–µ–Ω—É—î–º–æ?', reply_markup=create_reply_kbs(ex))
    else:
        await message.answer('üî¥–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –≤–ø—Ä–∞–≤–∏', reply_markup=ReplyKb.main_menu)
        await state.clear()


@fsm_router.message(StartTraining.muscle_group, F.text)
async def func(message: Message, state: FSMContext):
    await update_and_notify(message, state, 'muscle_group', message.text)
    ex = exercise.get_user_exercises(user_id=message.chat.id)
    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –≤–ø—Ä–∞–≤—É', reply_markup=create_reply_kbs(ex[message.text]))
    await state.set_state(StartTraining.exercise_name)


@fsm_router.message(StartTraining.exercise_name, F.text)
async def func(message: Message, state: FSMContext):
    await update_and_notify(message, state, 'exercise_name', message.text)
    await message.answer('–í–∫–∞–∂—ñ—Ç—å –≤–∞–≥—É', reply_markup=create_reply_kbs(weight_step_1_30, 5))
    await state.set_state(StartTraining.weight)


@fsm_router.message(StartTraining.weight, F.text)
async def func(message: Message, state: FSMContext):
    await update_and_notify(message, state, 'weight', message.text)
    await message.answer('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—ñ–≤', reply_markup=create_reply_kbs(repeat_step_1_30, 5))
    await state.set_state(StartTraining.repeats)


@fsm_router.message(StartTraining.repeats, F.text)
async def func(message: Message, state: FSMContext):
    await update_and_notify(message, state, 'repeats', message.text)
    data = await state.get_data()
    await state.clear()
    try:
        training.add_training_record(user_id=message.chat.id, exercise_name=data['exercise_name'],
                                     repeats=data['repeats'], weight=data['weight'])
    except pymysql.err.DataError:
        await message.answer('üî¥–≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –Ω–µ –≤—ñ—Ä–Ω—ñ\n–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏Ô∏èÔ∏è',
                             reply_markup=ReplyKb.another_training)
    else:
        await message.answer('üü¢–ü—ñ–¥—Ö—ñ–¥ –∑–∞–ø–∏—Å–∞–Ω–æ', reply_markup=ReplyKb.another_training)


# –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è__________________________________________________________________________________________________
@fsm_router.message(StateFilter(None), F.text == '–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –≤–ø—Ä–∞–≤—É')
async def func(message: Message, state: FSMContext):
    await state.set_state(NewExerciseState.muscle_group_name)
    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –º º—è–∑—ñ–≤ –¥–ª—è –Ω–æ–≤–æ—ó –≤–ø—Ä–∞–≤–∏ ',
                         reply_markup=create_reply_kbs(db.get_muscle_groups()))


@fsm_router.message(NewExerciseState.muscle_group_name, F.text)
async def func(message: Message, state: FSMContext):
    await state.update_data(muscle_group_name=message.text)
    await message.answer('–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –≤–ø—Ä–∞–≤–∏:', reply_markup=ReplyKeyboardRemove())
    await state.set_state(NewExerciseState.exercise_name)


@fsm_router.message(NewExerciseState.exercise_name, F.text)
async def func(message: Message, state: FSMContext):
    if not exercise.exercise_exists(exercise_name=message.text):
        await state.update_data(exercise_name=message.text)
        data = await state.get_data()
        await message.answer(f"–í–ø—Ä–∞–≤—É {data['exercise_name']} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!", reply_markup=ReplyKb.main_menu)
        await state.clear()
        exercise.add_user_exercise(user_id=message.chat.id, muscle_group_name=data['muscle_group_name'],
                                   exercise_name=data['exercise_name'])

    else:
        await state.update_data(exercise_name=message.text)
        await message.answer('–¢–∞–∫–∞ –≤–ø—Ä–∞–≤–∞ –≤–∂–µ —ñ—Å–Ω—É—î!', reply_markup=ReplyKb.main_menu)
        await state.clear()


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è__________________________________________________________________________________________________________
@fsm_router.message(F.text == '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')
async def func(message: Message):
    await message.answer('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', reply_markup=ReplyKb.settings_menu)


@fsm_router.message(F.text == '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
async def func(message: Message):
    await message.answer('–ì–æ–ª–æ–≤–Ω–∞', reply_markup=ReplyKb.main_menu)
