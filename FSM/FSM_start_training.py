import pymysql
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from db import exercise, training
from FSM.FSM_Dataclasses import StartTraining
from keyboards.reply import ReplyKb, create_reply_kbs, repeat_step_1_30, weight_step_1_30

FSM_start_training = Router()


async def update_and_notify(message: Message, state: FSMContext, field: str, value: str, redact_message: int = None):
    await state.update_data({field: value})
    data = await state.get_data()
    if not redact_message:
        await message.answer(f"–ì—Ä—É–ø–∞ –º º—è–∑—ñ–≤ - {data.get('muscle_group') if data.get('muscle_group') else '‚ùî'}\n"
                             f"–í–ø—Ä–∞–≤–∞ - {data.get('exercise_name') if data.get('exercise_name') else '‚ùî'}\n"
                             f"–í–∞–≥–∞ - {data.get('weight') if data.get('weight') else '‚ùî'} –∫–≥\n"
                             f"–ü–æ–≤—Ç–æ—Ä–∏ - {data.get('repeats') if data.get('repeats') else '‚ùî'} —Ä–∞–∑\n")


# –ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è____________________________________________________________________________________________________
@FSM_start_training.message(StateFilter(None), (F.text == '–ü–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è') | (F.text == '–î–æ–¥–∞—Ç–∏ —â–µ –æ–¥–∏–Ω –ø—ñ–¥—Ö—ñ–¥'))
async def func(message: Message, state: FSMContext):
    ex = exercise.get_user_exercises(user_id=message.chat.id)
    if ex:
        await state.set_state(StartTraining.muscle_group)
        await message.answer('–©–æ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç—Ä–µ–Ω—É—î–º–æ?', reply_markup=create_reply_kbs(ex))
    else:
        await message.answer('üî¥–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –≤–ø—Ä–∞–≤–∏', reply_markup=ReplyKb.main_menu)
        await state.clear()


@FSM_start_training.message(StartTraining.muscle_group, F.text)
async def func(message: Message, state: FSMContext):
    await update_and_notify(message, state, 'muscle_group', message.text)
    ex = exercise.get_user_exercises(user_id=message.chat.id)
    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –≤–ø—Ä–∞–≤—É', reply_markup=create_reply_kbs(ex[message.text]))
    await state.set_state(StartTraining.exercise_name)


@FSM_start_training.message(StartTraining.exercise_name, F.text)
async def func(message: Message, state: FSMContext):
    await update_and_notify(message, state, 'exercise_name', message.text)
    await message.answer('–í–∫–∞–∂—ñ—Ç—å –≤–∞–≥—É', reply_markup=create_reply_kbs(weight_step_1_30, 5))
    await state.set_state(StartTraining.weight)


@FSM_start_training.message(StartTraining.weight, F.text)
async def func(message: Message, state: FSMContext):
    await update_and_notify(message, state, 'weight', message.text)
    await message.answer('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—ñ–≤', reply_markup=create_reply_kbs(repeat_step_1_30, 5))
    await state.set_state(StartTraining.repeats)


@FSM_start_training.message(StartTraining.repeats, F.text)
async def func(message: Message, state: FSMContext):
    await update_and_notify(message, state, 'repeats', message.text)
    data = await state.get_data()
    await state.clear()
    try:
        training.add_training_record(user_id=message.chat.id, exercise_name=data['exercise_name'],
                                     repeats=data['repeats'], weight=data['weight'])
    except pymysql.err.DataError:
        await message.answer('üî¥–≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –Ω–µ –≤—ñ—Ä–Ω—ñ\n–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏Ô∏èÔ∏è',
                             reply_markup=ReplyKb.another_training)
    else:
        await message.answer('üü¢–ü—ñ–¥—Ö—ñ–¥ –∑–∞–ø–∏—Å–∞–Ω–æ', reply_markup=ReplyKb.another_training)
