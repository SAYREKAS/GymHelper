from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from database.core import gh
from keyboards.reply import ReplyKb, create_reply_kbs

from FSM.common_functions import is_number
from FSM.common_functions import update_and_notify
from FSM.FSM_Dataclasses import StartTrainingState

FSM_start_training = Router()


# –†–µ–∞–∫—Ü—ñ—è –Ω–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫—ñ  º–ü–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è º______________________________________________________________________
@FSM_start_training.message(StateFilter(None), (F.text == '–ü–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è') | (F.text == '–î–æ–¥–∞—Ç–∏ —â–µ –æ–¥–∏–Ω –ø—ñ–¥—Ö—ñ–¥'))
async def func(message: Message, state: FSMContext):
    ex = gh.get_user_exercises(user_id=message.from_user.id)

    if ex:
        await state.set_state(StartTrainingState.muscle_group)
        await message.answer('–©–æ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç—Ä–µ–Ω—É—î–º–æ?', reply_markup=create_reply_kbs(ex, additional_btn=['üö´–í—ñ–¥–º—ñ–Ω–∏—Ç–∏']))
    else:
        await message.answer('üî¥–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –≤–ø—Ä–∞–≤–∏', reply_markup=ReplyKb.main_menu)
        await state.clear()


# –º–µ–Ω—é –≤–∏–±–æ—Ä—É –≥—Ä—É–ø–∏ –º º—è–∑—ñ–≤______________________________________________________________________________________________
@FSM_start_training.message(StartTrainingState.muscle_group, F.text)
async def func(message: Message, state: FSMContext):
    ex = gh.get_user_exercises(user_id=message.from_user.id)

    if message.text in ex:
        await update_and_notify(message, state, 'muscle_group', message.text)
        await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –≤–ø—Ä–∞–≤—É',
                             reply_markup=create_reply_kbs(ex[message.text], additional_btn=['üö´–í—ñ–¥–º—ñ–Ω–∏—Ç–∏']))
        await state.set_state(StartTrainingState.exercise)
    else:
        await message.answer('–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–∞ –º º—è–∑—ñ–≤',
                             reply_markup=create_reply_kbs(ex, additional_btn=['üö´–í—ñ–¥–º—ñ–Ω–∏—Ç–∏']))


# –º–µ–Ω—é –≤–∏–±–æ—Ä—É –≤–ø—Ä–∞–≤–∏ –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –≥—Ä—É–ø–∏ –º º—è–∑—ñ–≤__________________________________________________________________________
@FSM_start_training.message(StartTrainingState.exercise, F.text)
async def func(message: Message, state: FSMContext):
    ex = gh.get_user_exercises(user_id=message.from_user.id)
    data = await state.get_data()

    if message.text in ex[data['muscle_group']]:
        await update_and_notify(message, state, 'exercise', message.text)
        await message.answer('–í–∫–∞–∂—ñ—Ç—å –≤–∞–≥—É', reply_markup=ReplyKb.cancel_btn)
        await state.set_state(StartTrainingState.weight)
    else:
        await message.answer('–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–±—Ä–∞–Ω–∞ –≤–ø—Ä–∞–≤–∞',
                             reply_markup=create_reply_kbs(ex[data['muscle_group']], additional_btn=['üö´–í—ñ–¥–º—ñ–Ω–∏—Ç–∏']))


# –º–µ–Ω—é –≤–∏–±–æ—Ä—É –≤–∞–≥–∏ –∑ —è–∫–æ—é –ø—Ä–∞—Ü—é–≤–∞–ª–∏_____________________________________________________________________________________
@FSM_start_training.message(StartTrainingState.weight, F.text)
async def func(message: Message, state: FSMContext):
    if is_number(message.text, 1000):
        await update_and_notify(message, state, 'weight', message.text.replace(',', '.'))
        await message.answer('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—ñ–≤', reply_markup=ReplyKb.cancel_btn)
        await state.set_state(StartTrainingState.repeats)
    else:
        await message.answer('–¢—ñ–ª—å–∫–∏ —Ü—ñ–ª—ñ –∞–±–æ –¥—Ä–æ–±–æ–≤—ñ —á–∏—Å–ª–∞, –≤—ñ–¥ 1 –¥–æ 1000–∫–≥', reply_markup=ReplyKb.cancel_btn)


# –∑–∞–ø–∏—Å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ –±–∞–∑—É –¥–∞–Ω–Ω–∏—Ö________________________________________________________________________________________
@FSM_start_training.message(StartTrainingState.repeats, F.text)
async def func(message: Message, state: FSMContext):
    if is_number(message.text, 1000):
        await update_and_notify(message, state, 'repeats', message.text.replace(',', '.'))
        data = await state.get_data()
        await state.clear()
        await message.answer(gh.add_training_record(user_id=message.from_user.id, exercise=data['exercise'],
                                                    repeats=data['repeats'], weight=data['weight']),
                             reply_markup=ReplyKb.main_menu)
    else:
        await message.answer('–¢—ñ–ª—å–∫–∏ —Ü—ñ–ª—ñ –∞–±–æ –¥—Ä–æ–±–æ–≤—ñ —á–∏—Å–ª–∞, –≤—ñ–¥ 1 –¥–æ 1000', reply_markup=ReplyKb.cancel_btn)
